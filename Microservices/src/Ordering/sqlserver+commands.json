//check docker status
docker ps
docker images
// SQL Server container
docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Pwd!4321' -p 1433:1433 -d mcr.microsoft.com/mssql/server
// because of warning on single quotes
docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Pwd!4321" -p 1433:1433 -d mcr.microsoft.com/mssql/server
// docker ps -a to get sql server container id
9b18252ba769 
// server container not running initially. 
// trying some things from MS Docs site: 
// https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-docker-container-deployment?view=sql-server-2017&pivots=cs1-cmd#pull-and-run-the-container-image
// like this bash script I will run in the Docker app:
docker exec -it 9b18252ba769 "bash"
// Connect via CMD
sqlcmd -S 192.168.65.0/28 -U SA -P "Pwd!4321"
sqlcmd -S 192.168.65.0 -U SA -P "Pwd!4321"
sqlcmd -S 192.168.65.0,1433 -U SA -P "Pwd!4321"
localhost:1433
// initial pw+log = guest and guest


// Swagger / Postman test inputs
// POST: add basket / cart
{  
  "userName": "YoBroMexico",
  "items": [
    {
      "color": "Nacho Cheese",
      "price": 50,
      "productId": "999",
      "productName": "Hello Kitty Inedible Cheeze Spread",
      "quantity": 4
    },
    {
      "color": "Stankonia",
      "price": 10,
      "productId": "1234567",
      "productName": "Hello Dolly Freemium Dreamium",
      "quantity": 1
    }
  ]
}

{  
  "userName": "Yoyo",
  "items": [
    {
      "color": "Gray Area",
      "price": 11,
      "productId": "210",
      "productName": "Squeeze Cheeze",
      "quantity": 3
    },
    {
      "color": "Old Yeller",
      "price": 19,
      "productId": "123",
      "productName": "Dog Bone",
      "quantity": 3
    }
  ]
}

{  
  "userName": "Yolo",
  "items": [
    {
      "color": "Brittney Spears",
      "price": 34,
      "productId": "2",
      "productName": "Pickle Spears",
      "quantity": 10
    },
    {
      "color": "Shiny",
      "price": 16,
      "productId": "3",
      "productName": "Fondue Forks",
      "quantity": 10
    }
  ]
}

// POST: checkout

// more details
{
  "userName": "Yoyo",
  "addressLine": "124 three street",
  "cardName": "Visa",
  "cardNumber": "1234567891011121",
  "country": "This Land is Our Land",
  "city": "Atlanta",
  "state": "GA",
  "cvv": "123",
  "emailAddress": "dingdong@thewitchis.dead",
  "expiration": "0224",
  "firstName": "Yoyo",
  "lastName": "Yolanda",
  "paymentMethod": 3,
  "totalPrice": 255,
  "zipCode": "45678"
}
{
  "userName": "YoBroMexico",
  "totalPrice": 210,
  "firstName": "Yo",
  "lastName": "BroMexico",
  "emailAddress": "dingdong@diddly.iddly",
  "addressLine": "120 Evergreen Terrace",
  "country": "USA",
  "state": "CA",
  "city": "Los Angeles",
  "zipCode": "55555",
  "cardName": "Visa",
  "cardNumber": "1111222244443333",
  "expiration": "0424",
  "cvv": "777",
  "paymentMethod": 1
}
{
  "userName": "Yolo",
  "totalPrice": 211,
  "firstName": "Yo",
  "lastName": "Lo",
  "emailAddress": "who@wha.when",
  "addressLine": "4321 Main St",
  "country": "USA",
  "state": "NY",
  "city": "New York City",
  "zipCode": "12345",
  "cardName": "Visa",
  "cardNumber": "9999888877776666",
  "expiration": "1224",
  "cvv": "987",
  "paymentMethod": 2
}


//Docker image cmd
docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Command}}\t{{.Ports}}"

docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Command}}\t{{.State}}\t{{.Status}}"

docker images
// stop all running containers, 
// ie: 1st 2 chars of container id
docker stop 1a
docker stop 2b
// check again for all stopped, ie: docker ps
docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
// sometimes need to remove image to build updated vsn
// (like you don't see new endpoints in swagger/index)
docker rmi 1a
// if image cannot remove because inside container, 
// remove container instead. first view all containers
docker ps -a
docker rm 1a
// remove all containers if it's been awhile?
docker ps -a
docker images
// remove some or all images
docker rmi 1a
// only removed a couple images that weren't showing 
// recent changes... and that's ok, can build 
// containers again and will only build what's needed
docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
// WARNING: Image for service basket.api was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
docker-compose -f docker-compose.yml -f docker-compose.override.yml up --build
// setting up https endpoint for docker
dotnet dev-certs https -ep %USERPROFILE%\.aspnet\https\aspnetapp.pfx -p Pwd!4321
dotnet dev-certs https --trust
// also tried changing docker-compose.override.yml to this, didn't get it working: 
frontend:
container_name: frontend
environment:
  - ASPNETCORE_ENVIRONMENT=Development
  - ASPNETCORE_URLS=https://+:443;http://+:80
  - ASPNETCORE_HTTPS_PORT=8013
  - ASPNETCORE_Kestrel__Certificates__Default__Password=Pwd!4321
  - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
  - "ApiSettings:BaseAddress=apigateway"
depends_on:
  - catalog.api
  - basket.api
  - ordering.api
  - apigateway
volumes:
  - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
  - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
  - ./https/aspnetapp.pfx:/https/aspnetapp.pfx:ro
ports:
  - "8003:80"
  - "8013:443"

// getting some 'product pics'
https://loremflickr.com/720/640/boat,ocean
https://loremflickr.com/720/640/phone,pixel/all
https://loremflickr.com/1080/720/lamborghini
// removed this from product page imgs
.Replace('-','x')


